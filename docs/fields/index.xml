<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fields on Piklist Documentation</title>
    <link>https://docs.piklist.com/fields/</link>
    <description>Recent content in Fields on Piklist Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.piklist.com/fields/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sanitizing Fields</title>
      <link>https://docs.piklist.com/fields/sanitizing-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.piklist.com/fields/sanitizing-fields/</guid>
      <description>When writing field code, whether with Piklist or not, you should be extra cautious of how you handle data coming into WordPress and how it’s presented to the end user. Piklist makes sanitizing your data easy with the sanitize parameter.
Choose the appropriate type of sanitization for each of your fields.
email Strips out all characters that are not allowable in an email address.
Codex reference for parameters: sanitize_email
&#39;sanitize&#39; =&amp;gt; array( array( &#39;type&#39; =&amp;gt; &#39;email&#39; ) )  file_name Removes special characters that are illegal in filenames on certain operating systems and special characters requiring special escaping to manipulate at the command line.</description>
    </item>
    
    <item>
      <title>Validating Fields</title>
      <link>https://docs.piklist.com/fields/validating-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.piklist.com/fields/validating-fields/</guid>
      <description>When writing field code, whether with Piklist or not, you should be extra cautious of how you handle data coming into WordPress and how it’s presented to the end user. Piklist makes validating your data easy with the validate parameter.
Choose the appropriate type of validation for each of your fields.
email Verifies that the input is in the proper format for an email address.
Uses the standard WordPress function is_email</description>
    </item>
    
    <item>
      <title>Create your own field</title>
      <link>https://docs.piklist.com/fields/create-your-own-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.piklist.com/fields/create-your-own-fields/</guid>
      <description>With Piklist, you can easily create your own fields to use in your projects.
 To start, you should have a /parts folder in your theme or plugin to put Piklist parts files. Add a subfolder called /fields/. The structure should look like /parts/fields/. Create a file in the /fields/ folder. Any files in this folder can become fields automatically registered with Piklist. The name of your file is important since it will become the name of your field.</description>
    </item>
    
    <item>
      <title>Field Parameters</title>
      <link>https://docs.piklist.com/fields/field-parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.piklist.com/fields/field-parameters/</guid>
      <description>This is a full list of available parameters for Piklist fields.
add_more (repeater) Piklist allows you to turn ANY field, or group of fields, into a repeater field, by simple adding the add_more parameter.
Displaying Data To display the results of the Add-More in your theme, pull the data like you normally would. Add more’s save data as an array, so you can loop though the data to display.
 Input: boolean Default: false  Example: &#39;add_more&#39; =&amp;gt; true</description>
    </item>
    
  </channel>
</rss>